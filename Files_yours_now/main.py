import os
import aiohttp
import asyncio

FILE = "http://192.168.0.108:5050/file"
DISK = "http://192.168.0.108:5050/disk"
DIRS = "http://192.168.0.108:5050/dirs"
ZAPROS = "http://192.168.0.108:5050/zapr"


async def send_post_request(data, when):
    async with aiohttp.ClientSession() as session:
        try:
            url = {"file": FILE, "disk": DISK, "dirs": DIRS}.get(when)
            if url:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {await response.json()}")
                    else:
                        print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}, {await response.text()}")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")


async def get_command():
    while True:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(ZAPROS) as response:
                    if response.status == 200:
                        command = await response.text()
                        if command:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                            return command.strip()
                        else:
                            print("‚ö† –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
                    else:
                        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {response.status}, {await response.text()}")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await asyncio.sleep(1)


async def list_directory(path):
    try:
        contents = os.listdir(path)
        print(f"\nüìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {path}")
        print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        json_dirs = []
        for index, item in enumerate(contents):
            item_path = os.path.join(path, item)
            if os.path.isdir(item_path):
                json_dirs.append({"index": index, "type": "folder", "name": item})
                print(f"  [{index}] üìÅ {item}/")
            else:
                json_dirs.append({"index": index, "type": "file", "name": item})
                print(f"  [{index}] üìÑ {item}")
        await send_post_request(json_dirs, 'dirs')  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        return contents
    except PermissionError:
        print("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ!")
        return []
    except FileNotFoundError:
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []


async def navigate(start_path):
    current_path = start_path
    history = []

    while True:
        contents = await list_directory(current_path)
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  [–Ω–æ–º–µ—Ä] - –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∏–ª–∏ —Ñ–∞–π–ª")
        print("  [..] - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
        print("  [exit] - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        comm = '""'
        while comm == '""':
            comm = await get_command()
        print(comm)
        
        if comm:
            choice = comm.strip()
        else:
            print("‚ö† –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")
            continue

        if choice == '"exit"':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        elif choice == "..":
            if history:
                current_path = history.pop()
            else:
                print("‚ö† –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ.")
        elif choice.isdigit():
            index = int(choice)
            if 0 <= index < len(contents):
                selected_item = contents[index]
                selected_path = os.path.join(current_path, selected_item)

                if os.path.isdir(selected_path):
                    history.append(current_path)
                    current_path = selected_path
                else:
                    print(f"\n–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {selected_item}")
                    try:
                        os.startfile(selected_path)
                    except Exception as e:
                        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
            else:
                print("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        else:
            print("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


def get_drives():
    import platform
    if platform.system() == "Windows":
        import string
        from ctypes import windll

        bitmask = windll.kernel32.GetLogicalDrives()
        if bitmask == 0:
            print("‚ö† –û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è GetLogicalDrives() –≤–µ—Ä–Ω—É–ª–∞ 0.")
            return []

        drives = []
        for letter in string.ascii_uppercase:
            if bitmask & 1:
                drives.append(f"{letter}:\\")
            bitmask >>= 1

        print("–î–∏—Å–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:", drives)
        return drives
    else:
        return ["/"]


async def main():
    print("üìÇ –°–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
    drives = get_drives()
    if not drives:
        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤.")
        return

    await send_post_request({"disks": drives}, 'disk')

    for i, drive in enumerate(drives):
        print(f"[{i}] {drive}")

    start_drive = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ (–Ω–æ–º–µ—Ä): ").strip()
    if start_drive.isdigit() and 0 <= int(start_drive) < len(drives):
        await navigate(drives[int(start_drive)])
    else:
        print("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


if __name__ == "__main__":
    asyncio.run(main())