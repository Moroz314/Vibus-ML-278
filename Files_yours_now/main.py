import os
import json
from websocket import WebSocketApp



class WebSocketHandler:
    def __init__(self, url):
        self.ws = WebSocketApp(
            url,
            on_open=self.on_open,
            on_message=self.on_message,
            on_error=self.on_error,
            on_close=self.on_close,
        )
        self.current_path = None
        self.history = []

    def on_open(self, ws):
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...")

    def on_message(self, ws, message):
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        try:
            command = json.loads(message)
            action = command.get("command")
            if action == "list_drives":
                self.list_drives(ws)
            elif action == "list_directory":
                path = command.get("path", self.current_path or "/")
                self.list_directory(ws, path)
            elif action == "navigate":
                path = command.get("path")
                print(path)
                self.navigate(ws, path)
            elif action == "exit":
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ.")
                ws.close()
            else:
                print("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        except json.JSONDecodeError:
            print("‚ö† –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def on_error(self, ws, error):
        print(f"‚ö† –û—à–∏–±–∫–∞ WebSocket: {error}")

    def on_close(self, ws, close_status_code, close_msg):
        print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

    def list_drives(self, ws):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"""
        import platform
        if platform.system() == "Windows":
            import string
            from ctypes import windll
        
            bitmask = windll.kernel32.GetLogicalDrives()
        
            if bitmask == 0:
                print("‚ö† –û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è GetLogicalDrives() –≤–µ—Ä–Ω—É–ª–∞ 0.")
                return []
        
            drives = []
            for letter in string.ascii_uppercase:
                if bitmask & 1: 
                    drives.append(f"{letter}:\\")
                bitmask >>= 1  
            
        else:
            return ["/"]  
        print(f"üìÇ –î–∏—Å–∫–∏: {drives}")
        response = {"action": "list_drives", "data": drives}  
        ws.send(json.dumps(response)) 
         

    def list_directory(self, ws, path):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            contents = os.listdir(path)
            print(f"\nüìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {path}")
            directory_data = []

            for index, item in enumerate(contents):
                item_path = os.path.join(path, item)
                if os.path.isdir(item_path):
                    directory_data.append({"index": index, "type": "folder", "name": item})
                    print(f"  [{index}] üìÅ {item}/")
                else:
                    directory_data.append({"index": index, "type": "file", "name": item})
                    print(f"  [{index}] üìÑ {item}")


            print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {path}: {directory_data}")
            self.current_path = path
            response = {"action": "list_directory", "path": path, "data": directory_data}
            ws.send(json.dumps(response))
        except PermissionError:
            print("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ.")
            response = {"action": "error", "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ"}
            ws.send(json.dumps(response))
        except FileNotFoundError:
            print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            response = {"action": "error", "message": "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            ws.send(json.dumps(response))

    def navigate(self, ws, path):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º"""
        if path == "..":
            if self.history:
                self.current_path = self.history.pop()
            else:
                print("‚ö† –£–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ.")
                response = {"action": "error", "message": "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ."}
                ws.send(json.dumps(response))
                return
        else:
            self.history.append(self.current_path)
            self.current_path = path

        print(f"üìÇ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É: {self.current_path}")
        self.list_directory(ws, self.current_path)

    def run(self):
        self.ws.run_forever()



if __name__ == "__main__":
    ws_handler = WebSocketHandler("ws://192.168.0.108:8000/ws/listen/files_pc/123")
    ws_handler.run()
