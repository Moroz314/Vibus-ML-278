from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from typing import List, Dict
import json
import uvicorn
from pydantic import BaseModel

app = FastAPI()


class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        print(f"üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)
        print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.active_connections)}")

    async def send_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)


manager = ConnectionManager()

commands_state: Dict[str, str] = {}

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await manager.connect(websocket)
    try:
        while True:

            data = await websocket.receive_text()
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

            try:
                message = json.loads(data)
                action = message.get("action")

                if action == "response":
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message.get('data')}")
                elif action == "error":
                    print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message.get('message')}")
                else:
                    print(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {message}")

            except json.JSONDecodeError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
class CommandRequest(BaseModel):
    command: str
    path: str
@app.post("/send-command")
async def send_command(request: CommandRequest):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"""
    command = request.command
    path = request.path
    if not manager.active_connections:
        return {"error": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"}
    try:
        await manager.broadcast(json.dumps({"action": "command", "command": command, "path": path}))
        return {"status": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", "command": command, "path" : path}
    except Exception as e:
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {str(e)}"}

@app.get("/commands")
async def get_commands():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    return commands_state

if __name__ == "__main__":
    uvicorn.run(app, host="192.168.0.108", port=8000)